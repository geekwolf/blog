<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql数据库 | Geekwolf's Blog]]></title>
  <link href="http://geekwolf.github.io/blog/categories/mysql数据库/atom.xml" rel="self"/>
  <link href="http://geekwolf.github.io/"/>
  <updated>2014-07-24T13:54:44+08:00</updated>
  <id>http://geekwolf.github.io/</id>
  <author>
    <name><![CDATA[Geekwolf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IO调度算法适用场景]]></title>
    <link href="http://geekwolf.github.io/blog/2014/07/03/iodiao-du-suan-fa-gua-yong-chang-jing/"/>
    <updated>2014-07-03T13:35:54+08:00</updated>
    <id>http://geekwolf.github.io/blog/2014/07/03/iodiao-du-suan-fa-gua-yong-chang-jing</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;通常磁盘的读写影响是由磁头到柱面移动造成了延迟，解决这种延迟内核主要采用两种策略：缓存和IO调度算法来进行弥补<br>
<strong>Caching：</strong>IO请求被缓存在大页和buffer caches里面，读请求会预先从缓存读取，写请求会先写进缓存，然后在保存到磁盘<br>
<strong>四种IO调度算法：</strong></p>

<pre><code>cat /sys/block/sda/queue/scheduler
noop anticipatory deadline [cfq] (当前是cfq)
</code></pre>

<p><img src="http://geekwolf.github.io/images/mysql/io.png" alt="" /></p>

<p><strong>noop：</strong>noop调度算法不会对I/O请求排序操作，除了合并外也不会做任何其他优化，直接以类似FIFO的顺序提交I/O请求；对于SSD、虚拟机或者存储设备可能会更加高效<br>
<strong>anticipatory(as)：</strong>基于预测的IO算法，类似DeadLine，也维护了三个请求对列；区别在于当它处理完一个I/O请求后并不会直接返回处理下一个请求，而是等待6ms(默认),如果这时候有新来的针对当前扇区相邻扇区的请求，那么会直接处理它，当等待时间结束后，调度器才返回处理下一个对列请求<br>
试想一下，如果系统有频繁的针对邻近扇区的I/O请求，那么这种预测算法必然大幅提高整体的吞吐量，毕竟节约了那么多寻道时间<br>
<strong>deadline：</strong>DEADLINE 在CFQ的基础上，解决了IO请求饿死的极端情况。除了CFQ本身具有的IO排序队列之外，DEADLINE额外分别为读IO和写IO提供了FIFO队 列。读FIFO队列的最大等待时间为500ms，写FIFO队列的最大等待时间为5s。FIFO队列内的IO请求优先级要比CFQ队列中的高，，而读 FIFO队列的优先级又比写FIFO队列的优先级高。优先级可以表示如下：<br>
&emsp;&emsp;FIFO(Read) > FIFO(Write) > CFQ<br>
&emsp;&emsp;deadline 算法保证对于既定的 IO 请求以最小的延迟时间，从这一点理解，对于 DSS 应用应该会是很适合的<br>
<strong>cfq(2.6.18+内核默认CFQ)：</strong>该算法的特点是按照IO请求的地址进行排序，而不是按照先来后到的顺序来进行响应。在传统的SAS盘上，磁盘寻道花去了绝大多数的IO响应时间。CFQ的出发点是对IO地址进行排序，以尽量少的磁盘旋转次数来满足尽可能多的IO请求。在 CFQ算法下，SAS盘的吞吐量大大提高了。但是相比于NOOP的缺点是，先来的IO请求并不一定能被满足，可能会出现饿死的情况；</p>

<!--more-->


<p></p>

<p><strong>调度算法适用场合：</strong><br>
&emsp;&emsp;在传统的SAS盘上，CFQ、DEADLINE、ANTICIPATORY都是不错的选择；对于专属的数据库服务器和文件服务器，DEADLINE的吞吐量和响应时间都表现良好，适用于大量IO操作的环境<br><br/>
&emsp;&emsp;在SSD、Fusion IO上，最简单的NOOP反而可能是最好的算法，因为其他三个算法的优化是基于缩短寻道时间的，而固态硬盘没有所谓的寻道时间且IO响应时间非常短。<br>
&emsp;&emsp;ANTICIPATORY通常更适用于大量持续读的环境，并不适用于DB Server<br>
&emsp;&emsp;CFQ 适用于有大量来自不同进程的并发读写的环境如桌面环境等<br></p>

<p><strong>手动临时更改调度算法：</strong></p>

<pre><code>echo deadline &gt; /sys/block/sda/queue/scheduler
</code></pre>

<p><strong>永久更改：</strong><br>
<strong>A.使用tuned来修改调度算法</strong><br></p>

<pre><code>比如：vim /etc/tuned-profiles/throughtput-performance/ktune.sysconfig
ELEVATOR="deadline"
ELEVATOR_TUNE_DEVS="/sys/block/{sd,cciss,dm-,vd}*/queue/scheduler"
tuned-admin profile throughtput-performance
chkconfig tuned on
chkconfig ktune on
更改调度算法之后/sys/block/sda/quue/iosched/会生成对应的参数文件
</code></pre>

<p><strong>B.通过修改grub.conf来修改调度算法</strong></p>

<pre><code> kernel /vmlinuz-2.6.32-358.11.1.el6.x86_64 ro root=UUID=97693d73-443f-438a-90a3-208855faff19 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_MD crashkernel=auto LANG=zh_CN.UTF-8 rd_NO_LVM rd_NO_DM elevator=deadline rhgb quiet
</code></pre>

<p><strong>查看调度算法参数的含义：</strong></p>

<pre><code>yum -y install kernel-doc
比如:/usr/share/doc/kernel-doc-2.6.32/Documentation/block/deadline-iosched.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL5.6基于GTID复制配置]]></title>
    <link href="http://geekwolf.github.io/blog/2014/06/12/mysql5-dot-6ji-yu-gtidfu-zhi-pei-zhi/"/>
    <updated>2014-06-12T16:06:59+08:00</updated>
    <id>http://geekwolf.github.io/blog/2014/06/12/mysql5-dot-6ji-yu-gtidfu-zhi-pei-zhi</id>
    <content type="html"><![CDATA[<p>一、<a href="#gg1">什么是GTID？</a><br>
二、<a href="#gg2">GTID的表示方式</a><br>
三、<a href="#gg3">基于GTID的复制配置</a><br>
四、<a href="#gg4">基于GTID复制增加新的slave</a><br>
五、<a href="#gg5">基于GTID复制出错的解决办法</a><br>
&emsp;&emsp;<a href="#gg6">注意事项</a><br>
&emsp;&emsp;<a href="#gg7">参考文档</a><br></p>

<p><strong><span id="gg1">一、什么是GTID？</span><br></strong>
&emsp;&emsp;GTID(Global Transaction Identifiers)是全局事务标识<br>
&emsp;&emsp;当使用GTIDS时，在主上提交的每一个事务都会被识别和跟踪，并且运用到所有从MySQL，而且配置主从或者主从切换时不再需要指定 master_log_files和master_log_pos；由于GTID-base复制是完全基于事务的，所以能很简单的决定主从复制的一致性；官方建议Binlog采用Row格式</p>

<p><strong><span id="gg2">二、GTID的表示方式</span><br></strong>
source_id：transaction_id<br>
source_id：表示执行事务的主库的UUID(server_uuid:Mysql5.6的data目录下启动时会生成auto.cnf文件记录了uuid，重启后uuid不变，删除文件后会重新生成新的uuid)；<br>
transaction_id：是一个从1开始自增的计数，表示在这个主库上执行的第n个事务；<br>
由于每台Mysql的uuid是全球唯一的，transaction_id自身唯一，就保证了GTID全局唯一性</p>

<!--more-->


<p></p>

<pre><code>mysql&gt; show variables like 'server_uuid'; 
+---------------+--------------------------------------+
| Variable_name | Value |
+---------------+--------------------------------------+
| server_uuid | 4468c0e8-ef6f-11e3-9c2c-0200c0a80ad8 |
+---------------+--------------------------------------+
1 row in set (0.00 sec)
</code></pre>

<p><strong><span id="gg3">三、基于GTID的复制配置</span><br></strong></p>

<p><strong>master：</strong>192.168.10.216<br>
<strong>slave ：</strong>192.168.10.217<br>
<strong>步骤：</strong><br>
&emsp;&emsp;修改主从my.cnf增加GTID支持&mdash;>主只读&mdash;>拷贝数据到从数据目录&mdash;>重启主从&mdash;>在从上进行配置<br>
1.修改主从my.cnf增加GTID支持<br></p>

<pre><code>主Mysql配置：
server-id=216   
binlog-format=ROW
gtid-mode=on
enforce-gtid-consistency=true 
log-bin=mysql-bin
log-slave-updates=true   slave更新是否记入日志

从Mysql配置：
server-id=217   同一个复制拓扑中的所有服务器的id号必须惟一
binlog-format=ROW
gtid-mode=on  启用gtid类型，否则就是普通的复制架构
enforce-gtid-consistency=true 强制GTID的一致性
log-bin=mysql-bin
log-slave-updates=true   slave更新是否记入日志
只从库配置：
slave-paralles-workers 设定从服务器的SQL线程数；0表示关闭多线程复制功能；
</code></pre>

<p>2.主只读<br></p>

<pre><code>mysql&gt; SET @@global.read_only = ON;
</code></pre>

<p>拷贝主数据到从目录<br></p>

<p>3.重启主从Mysql<br></p>

<p>4.在从上配置基于GTID的复制<br></p>

<pre><code>mysql&gt; CHANGE MASTER TO 
     &gt; MASTER_HOST = ‘192.168.10.216’,
     &gt; MASTER_PORT = 3306,
     &gt; MASTER_USER = 'rep',
     &gt; MASTER_PASSWORD = 'geekwolf',
     &gt; MASTER_AUTO_POSITION = 1;
</code></pre>

<p>5.启动从库<br></p>

<pre><code>mysql&gt; start slave; 
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; show slave status \G
*************************** 1. row ***************************
   Slave_IO_State: Waiting for master to send event
  Master_Host: 192.168.10.216
  Master_User: rep
  Master_Port: 3306
Connect_Retry: 60
  Master_Log_File: mysql-bin.000002
  Read_Master_Log_Pos: 41921904
   Relay_Log_File: relay-bin.000002
Relay_Log_Pos: 64520
Relay_Master_Log_File: mysql-bin.000002
 Slave_IO_Running: Yes
Slave_SQL_Running: Yes
  Replicate_Do_DB:
  Replicate_Ignore_DB:
   Replicate_Do_Table:
   Replicate_Ignore_Table:
  Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table: mysql.%
   Last_Errno: 0
   Last_Error:
 Skip_Counter: 0
  Exec_Master_Log_Pos: 41921904
  Relay_Log_Space: 64718
  Until_Condition: None
   Until_Log_File:
Until_Log_Pos: 0
   Master_SSL_Allowed: No
   Master_SSL_CA_File:
   Master_SSL_CA_Path:
  Master_SSL_Cert:
Master_SSL_Cipher:
   Master_SSL_Key:
Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
Last_IO_Errno: 0
Last_IO_Error:
   Last_SQL_Errno: 0
   Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
 Master_Server_Id: 216
  Master_UUID: 21ad8db5-f038-11e3-a14a-0200c0a80ad8
 Master_Info_File: /usr/local/mysql/data/master.info
SQL_Delay: 0
  SQL_Remaining_Delay: NULL
  Slave_SQL_Running_State: Reading event from the relay log
   Master_Retry_Count: 86400
  Master_Bind:
  Last_IO_Error_Timestamp:
 Last_SQL_Error_Timestamp:
   Master_SSL_Crl:
   Master_SSL_Crlpath:
   Retrieved_Gtid_Set: 21ad8db5-f038-11e3-a14a-0200c0a80ad8:76793-77026
Executed_Gtid_Set: 21ad8db5-f038-11e3-a14a-0200c0a80ad8:1-77025
Auto_Position: 1
1 row in set (0.00 sec)
</code></pre>

<p><strong>注：</strong><br></p>

<p>两个Yes代表复制正常<br>
Slave_IO_Running: Yes  <br>
Slave_SQL_Running: Yes  <br></p>

<p>基于GTID复制的新特性：<br>
 Retrieved_Gtid_Set: 21ad8db5-f038-11e3-a14a-0200c0a80ad8:76793-77026<br>
 Executed_Gtid_Set: 21ad8db5-f038-11e3-a14a-0200c0a80ad8:1-77025<br></p>

<p>Retrieved_Gtid_Set项：记录了relay日志从Master获取了binlog日志的位置<br>
Executed_Gtid_Set项：记录本机执行的binlog日志位置（如果是从机，包括Master的binlog日志位置和slave本身的binlog日志位置）<br></p>

<p><strong><span id="gg4">四、基于GTID复制增加新的slave</span><br></strong>
&emsp;&emsp;备份主MySQL数据，记录主gtid_executed&mdash;>将备份数据恢复到从数据目录&mdash;>设置从gtid_purged的值为主的gtid_executed值&mdash;>启动复制即可</p>

<p>1.使用mysqldump备份主数据<br>
&emsp;&emsp;mysqldump &mdash;all-databases &mdash;single-transaction &mdash;triggers &mdash;routines &mdash;host=127.0.0.1 &mdash;port=3306 &mdash;user=root  &mdash;password=geekwolf > backup.sql<br>
&emsp;&emsp;亦可以使用xtrabackup也支持GTID：<br>
&emsp;&emsp;请参考:<a href="http://www.mysqlperformanceblog.com/2013/05/09/how-to-create-a-new-or-repair-a-broken-gtid-based-slave-with-percona-xtrabackup/">http://www.mysqlperformanceblog.com/2013/05/09/how-to-create-a-new-or-repair-a-broken-gtid-based-slave-with-percona-xtrabackup/</a></p>

<p>2.传到从MySQL，恢复数据<br>
&emsp;&emsp;由于新版本msqldump会记录并设置GTID_PURGED的值等于主的GTID_EXECUTED，所以只需要将sql导入到从库即可</p>

<p>3.启动主从复制<br></p>

<pre><code>从库执行
mysql &gt; CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_USER='root', MASTER_PASSWORD=geekwolf', MASTER_PORT=3306, MASTER_AUTO_POSITION = 1;
mysql &gt; START SLAVE;
</code></pre>

<p><strong><span id="gg5">五、基于GTID复制出错的解决办法</span><br></strong></p>

<p><strong>问题:</strong><br></p>

<pre><code>Slave_IO_Running: No
Slave_SQL_Running: Yes
Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.'
</code></pre>

<p><strong>解决思路:</strong><br></p>

<p>从复制跳过已经丢失的binlog，继续复制或者重新做主从（可以参考上面的操作）</p>

<pre><code>主MySQL：
mysql&gt; show global variables like '%gtid_executed%';
+---------------+-----------------------------------------------+
| Variable_name | Value |
+---------------+-----------------------------------------------+
| gtid_executed | 21ad8db5-f038-11e3-a14a-0200c0a80ad8:1-223937 |
+---------------+-----------------------------------------------+
1 row in set (0.00 sec)

从MySQL：
mysql&gt; set global GTID_PURGED="21ad8db5-f038-11e3-a14a-0200c0a80ad8:1-223937";
ERROR 1840 (HY000): @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_EXECUTED is empty.

mysql&gt; reset master;
Query OK, 0 rows affected (0.19 sec)
mysql&gt; show global variables like 'GTID_EXECUTED';
+---------------+-----------------------------------------------+
| Variable_name | Value |
+---------------+-----------------------------------------------+
| gtid_executed |  |
+---------------+-----------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; stop slave;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; set global GTID_PURGED="21ad8db5-f038-11e3-a14a-0200c0a80ad8:1-223937";
Query OK, 0 rows affected (0.13 sec)

mysql&gt; start slave;
Query OK, 0 rows affected (0.04 sec)

mysql&gt; show slave status\G
[...]
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
[...]
</code></pre>

<p><strong><span id="gg6">注意事项：</span><br></strong>
&emsp;&emsp;使用基于GTID复制时，不需要再关心master_log_file和master_log_pos，替代的是只需要知道master上的GTID，并且配置在从上即可；<br>
&emsp;&emsp;记录GTID的有两个全局变量：gtid_executed和gtid_purged<br></p>

<p><strong>与GTID复制相关的参数：</strong></p>

<p><img src="http://geekwolf.github.io/images/mysql/gtid.png" alt="" /></p>

<p>GTID_EXECUTED  ：表示已经在该实例上执行过的事务；执行RESET MASTER可以置空该参数；也可以设置GTID_NEXT执行一个空事务来影响GTID_EXECUTED<br>
GTID_NEXT           ：是SESSION级别参数，表示下一个事务被执行使用的GTID（show variables like &lsquo;gtid_%&rsquo;;）<br>
GTID_PURGED      ：表示被删除的binlog事务GTID，它是GTID_EXCUTED的子集，MySQL5.6.9，该参数无法被设置<br>
GTID_OWENED    ：表示正在执行的事务的GTID以及对应的线程ID<br></p>

<p>如果设置MASTER_AUTO_POSITION = 1表示主从复制连接使用基于GTID的方式复制</p>

<pre><code>CHANGE MASTER TO MASTER_HOST='192.168.10.216',MASTER_USER='rep',MASTER_PASSWORD='geekwolf',MASTER_AUTO_POSITION=1;
</code></pre>

<p>如果在GTID复制模式下想要使用基于文件的复制协议需要MASTER_AUTO_POSITION=0（至少指定其中MASTER_LOG_FILE、MASTER_LOG_POSITION一个）</p>

<pre><code>CHANGE MASTER TO MASTER_HOST='192.168.10.216',MASTER_USER='rep',MASTER_PASSWORD='geekwolf',MASTER_LOG_FILE='mysql-bin.000002',MASTER_LOG_POS=120,MASTER_AUTO_POSITION=0;
</code></pre>

<p><strong><span id="gg7">参考文档：</span></strong></p>

<blockquote><p><a href="http://dev.mysql.com/doc/refman/5.6/en/replication-gtids-restrictions.html">MYSQL 5.6 GTID-based Replication</a><br>
<a href="http://www.woqutech.com/?p=1108">MYSQL 5.6 GTID模式下手工删除日志导致备库数据丢失</a><br>
<a href="http://www.mysqlperformanceblog.com/2013/05/09/how-to-create-a-new-or-repair-a-broken-gtid-based-slave-with-percona-xtrabackup/">How to create a new (or repair a broken) GTID based slave with Percona XtraBackup</a><br></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL复制原理与配置]]></title>
    <link href="http://geekwolf.github.io/blog/2014/06/05/mysqlfu-zhi-yuan-li-yu-pei-zhi/"/>
    <updated>2014-06-05T17:11:56+08:00</updated>
    <id>http://geekwolf.github.io/blog/2014/06/05/mysqlfu-zhi-yuan-li-yu-pei-zhi</id>
    <content type="html"><![CDATA[<p>一、<a href="#r1">Mysql复制基本原理</a><br>
二、<a href="#r2">Mysql复制中Binlog的三种格式</a><br>
&emsp;&emsp;&emsp;&emsp;2.1 <a href="#r3">三种格式的介绍</a><br>
&emsp;&emsp;&emsp;&emsp;2.2 <a href="#r4">Binlog格式的优缺点</a><br>
&emsp;&emsp;&emsp;&emsp;2.3 <a href="#r5">Binlog基本配置</a><br>
三、<a href="#r6">Mysql常见两种复制方式</a><br>
&emsp;&emsp;&emsp;&emsp;3.1 <a href="#r7">异步复制(Asynchronous Replication)</a><br>
&emsp;&emsp;&emsp;&emsp;3.2 <a href="#r8">半同步复制(Semi-synchroous Replicaion)</a><br>
四、<a href="#r9">提升主从复制性能的方法</a><br>
五、<a href="#r10">Mysql复制遇到的一些问题</a><br></p>

<p><strong><span id="r1">一、Mysql复制基本原理</span></strong></p>

<p><img src="http://geekwolf.github.io/images/mysql/replication/fzyl.png" alt="" /></p>

<!--more-->


<p></p>

<ol>
<li>Mysql主库在事务提交时会将数据变更作为Events记录在Binlog中，Mysql主库的sync_binlog参数(默认值为0<br>
可参考<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#sysvar_sync_binlog">http://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#sysvar_sync_binlog</a>)控制Binlog日志刷新到磁盘</li>
<li>主库推送Binlog中的事件到从库的Relay Log，之后从库根据Relay Log重做DML操作</li>
<li>Mysql通过3个线程完成主从复制：Binlog Dump线程跑在主库，I/O线程和SQL线程跑在从库；<br>
&emsp;&emsp;当从库启动复制，首先创建I/O线程连接到主库，主库随后创建Binlog Dump线程读取数据库事件并发给I/O线程，I/O线程获取到事件数据后更新到从库的Relay Log中去，之后从库上的SQL线程读取Relay Log中更新的数据库事件并应用<br></li>
</ol>


<p><strong>注释：</strong><br>
 &emsp;&emsp;从库上两个重要文件：<code>master.info</code>：记录I/O线程连接主库的一些参数；<code>relay-log.info</code>：记录SQL线程应用Relay Log的一些参数<br>
<strong><span id="r2">二、Mysql复制中Binlog的三种格式</span></strong>
<strong><span id="r3">2.1 三种格式的介绍</span></strong><br>
&emsp;&emsp;<strong>Statement (statement-based replication:SBR)：</strong>基于SQL语句级别的Binlog，每条修改数据的SQL都会保存在Binlog里面；<br>
&emsp;&emsp;<strong>Row(RBR)：</strong>基于行级别，记录每一行数据的变化，也就是将每行数据的变化都记录到Binlog里面，记录得非常详细，单并不记录原始SQL；在复制过程，并不会因为存储过程或者触发器造成主从数据不一致问题，但记录的binlog大小会比Statement格式大很多,CREATE、DROP、ALTER操作只记录原始SQL，而不会记录每行数据的变化到Binlog；<br>
&emsp;&emsp;<strong>Mixed(MBR):</strong>混合Statement和Row模式，默认是Statement模式记录，某些情况下会切换到Row模式，例如SQL中包含与时间、用户相关的函数等statement无法完成主从复制的操作；<br>
<strong><span id="r4">2.2 Binlog格式的优缺点</span></strong><br>
<strong>基于Statement复制(Mysql5.5默认格式):</strong><br>
<strong>优点：</strong><br>
&emsp;&emsp;Binlog日志量少，节约IO，和减少了主从网络binlog传输量<br>
&emsp;&emsp;只记录在master上所执行的语句的细节，以及执行语句的上下文信息<br>
&emsp;&emsp;同时，审计数据库变的更容易<br></p>

<p><strong>缺点：</strong><br>
&emsp;&emsp;由于此格式是记录原始执行的SQL，保证能在slave上正确执行必须记录每条语句的上下文信息<br>
&emsp;&emsp;部分修改数据库时使用的函数可能出现无法复制：sleep()、last_insert_id()、 load_file()、uuid()、user()、found_rows()、sysdate()(除非启动时&mdash;sysdate-is-now=true)<br>
&emsp;&emsp;可能会导致触发器或者存储过程复制导致数据不一致，如调用NOW()函数<br>
&emsp;&emsp;INSERT&hellip;SELECT 可能会产生比RBR更多的行级锁，例如没有order by的insert&hellip;select<br>
&emsp;&emsp;复制需要执行全表扫描(WHERE中没有使用索引)的UPDATE时，需比row请求更多的行级锁<br>
&emsp;&emsp;对于AUTO_INCREMENT字段的InnoDB引擎表，INSERT会阻塞其他INSERT语句</p>

<p><strong>注：</strong>如果statement不能保证主从正常复制,error日志会有提示：Statement may not be safe to log in statement format<br></p>

<p><strong>基于Row复制:</strong><br>
<strong>优点：</strong><br>
&emsp;&emsp;只记录每一行数据变化的细节，不需要记录上下文信息<br>
&emsp;&emsp;不会出现某些情况下auto_increment columns,timestamps,.triger、function、procedure无法正常复制的问题<br>
&emsp;&emsp;新的row格式已经有了优化， CREATE、DROP、ALTER操作只记录原始SQL，而不会记录每行数据的变化到Binlog<br>
&emsp;&emsp;适用于主从复制要求强一致性的环境<br></p>

<p><strong>缺点：</strong><br>
&emsp;&emsp;update、delete、load data local infile等频繁更新或者删除大量行时会产生大量的binlog日志，会有一定的I/O压力，主从同步产生不必要的流量<br>
&emsp;&emsp;如：UPDATE products set status=&lsquo;sold&rsquo; where product_id BETWEEN 30000 and 50000;<br>
&emsp;&emsp;无法很好的进行数据库审计</p>

<p><strong><span id="r5">2.3 Binlog基本配置</span></strong></p>

<p>修改配置文件my.cnf</p>

<pre><code>binlog_format=row                               binlog日志格式 
max_binlog_size = 512M                          每个日志文件大小
binlog_cache_size=1M                            二进制日志缓冲大小,uncommitted事务产生的日志写在cache，committed的持久化到磁盘binlog里面，此参数不是全局的，是针对session的
expire_logs_days = 3                            binlog有效期
log-bin=/datas/mysql/logs/mysql-bin             binlog日志目录
relay-log=/datas/mysql/logs/relay-bin           从库中继日志目录
#slave_skip_errors = all
</code></pre>

<p><strong><span id="r6">三、Mysql常见两种复制方式</span></strong><br>
<strong><span id="r7">3.1 异步复制（Asynchronous Replication）</span></strong></p>

<p><img src="http://geekwolf.github.io/images/mysql/replication/ybfz.png" alt="" /></p>

<p>&emsp;&emsp;主库执行完Commit后，在主库写入Binlog日志后即可成功返回客户端，无需等等Binlog日志传送给从库</p>

<p><strong>异步复制主从配置：</strong><br></p>

<p>主 : 192.168.10.216<br>
从 : 192.168.10.217<br></p>

<p><strong>步骤：</strong>主从版本一致&mdash;>主库授权复制帐号&mdash;>确保开启binlog及主从server_id唯一&mdash;>主库只读，记录主binlog名称及偏移量&mdash;>拷贝主数据文件到从相应位置&mdash;>从库change master to &mdash;>slave start&mdash;>检查两个yes</p>

<p><strong>1.主MySQL配置</strong><br></p>

<pre><code>mysql&gt;GRANT REPLICATION SLAVE ON *.* TO 'rep'@'192.168.10.217'  IDENTIFIED BY  'geekwolf';
mysql&gt;FLUSH TABLES WITH READ LOCK;
mysql&gt; SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+-------------------+
| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000003 | 120 | | | |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
将主库数据文件拷贝到从库对应目录
mysql&gt;UNLOCK TABLES;
</code></pre>

<p><strong>2.从MySQL配置</strong></p>

<pre><code>mysql&gt;CHANGE MASTER TO MASTER_HOST='192.168.10.216',MASTER_USER='rep',MASTER_PASSWORD='geekwolf',MASTER_LOG_FILE='mysql-bin.000003',MASTER_LOG_POS=120;
mysql&gt;START  SLAVE;
mysql&gt; SHOW SLAVE STATUS \G;
*************************** 1. row ***************************
   Slave_IO_State: Waiting for master to send event
  Master_Host: 192.168.10.216
  Master_User: rep
  Master_Port: 3306
Connect_Retry: 1
  Master_Log_File: mysql-bin.000003
  Read_Master_Log_Pos: 120
   Relay_Log_File: relay-bin.000002
Relay_Log_Pos: 283
Relay_Master_Log_File: mysql-bin.000003
 Slave_IO_Running: Yes
Slave_SQL_Running: Yes
  Replicate_Do_DB:
  Replicate_Ignore_DB:
   Replicate_Do_Table:
   Replicate_Ignore_Table:
  Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
   Last_Errno: 0
   Last_Error:
 Skip_Counter: 0
  Exec_Master_Log_Pos: 120
  Relay_Log_Space: 450
  Until_Condition: None
   Until_Log_File:
Until_Log_Pos: 0
   Master_SSL_Allowed: No
   Master_SSL_CA_File:
   Master_SSL_CA_Path:
  Master_SSL_Cert:
Master_SSL_Cipher:
   Master_SSL_Key:
Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
Last_IO_Errno: 0
Last_IO_Error:
   Last_SQL_Errno: 0
   Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
 Master_Server_Id: 216
  Master_UUID: bd2a4c6b-d954-11e3-8c0a-0200c0a80ad8
 Master_Info_File: /usr/local/mysql/data/master.info
SQL_Delay: 0
  SQL_Remaining_Delay: NULL
  Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it
   Master_Retry_Count: 86400
  Master_Bind:
  Last_IO_Error_Timestamp:
 Last_SQL_Error_Timestamp:
   Master_SSL_Crl:
   Master_SSL_Crlpath:
   Retrieved_Gtid_Set:
Executed_Gtid_Set:
Auto_Position: 0
1 row in set (0.00 sec)
</code></pre>

<p><strong>注:</strong>
异步复制中只要binlog不丢失即可保证数据的完整性；当主宕机，从库未收到binlog时，就会丢失数据（主磁盘正常时可以提取差异binlog在从执行），此时就需要用到半同步复制方式</p>

<p><strong><span id="r8">3.2 半同步复制(Semi-synchroous Replicaion)</span></strong></p>

<p><img src="http://geekwolf.github.io/images/mysql/replication/btb.png" alt="" /></p>

<p>&emsp;&emsp;主库每次事务成功提交时并不及时反馈给前端，而是等待其中一个从库也接收到Binlog事务并成功写入Relay Log之后，才返回Commit操作成功给客户端；如此半同步就保证了事务成功提交后，至少有两份日志记录，一份在主库Binlog上，另一份在从库的Relay Log上，从而进一步保证数据完整性；半同步复制很大程度取决于主从网络RTT（往返时延）；以插件形式存在，</p>

<p><strong>半同步复制主从配置：</strong></p>

<p>主 : 192.168.10.216<br>
从 : 192.168.10.217</p>

<p><strong>1.判断是否支持动态增加插件</strong><br></p>

<pre><code>mysql&gt; select @@have_dynamic_loading;
+------------------------+
| @@have_dynamic_loading |
+------------------------+
| YES |
+------------------------+
</code></pre>

<p><strong>2.检查是否存在半同步插件,分别在主从安装</strong><br>
/usr/local/mysql/lib/mysql/plugin/semisync_master.so<br>
/usr/local/mysql/lib/mysql/plugin/semisync_slave.so<br></p>

<p>主MySQL上安装semisync_master.so:<br>
mysql>install plugin rpl_semi_sync_master SONAME &lsquo;semisync_master.so&rsquo;</p>

<p>从MySQL上安装semisync_slave.so:<br>
mysql>install plugin rpl_semi_sync_slave SONAME &lsquo;semisync_slave.so&rsquo;</p>

<p>安装后通过show plugins;查看安装的插件</p>

<p><strong>3.分别在主从打开semi-sync(默认关闭)</strong><br>
主：<br>
修改my.cnf<br></p>

<pre><code>rpl_semi_sync_master_enabled=1
rpl_semi_sync_master_timeout=30000(毫秒)   从库宕机或网络故障导致binlog没有及时传送到从库，此时主库上的事务需要等待的时间；此时间内没恢复，MySQL自动调整复制为异步复制模式
mysql&gt; set global rpl_semi_sync_master_enabled=1; 
Query OK, 0 rows affected (0.00 sec)
mysql&gt; set global rpl_semi_sync_master_timeout=30000;
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<p><strong>从:</strong><br>
修改my.cnf<br></p>

<pre><code>rpl_semi_sync_master_enabled=1
mysql&gt; set global rpl_semi_sync_master_enabled=1; 
Query OK, 0 rows affected (0.00 sec)
由于之前配置的复制是异步的，所以需要重启下从库I/O线程(或者直接重启主从stop slave;start slave;)：

mysql&gt; STOP SLAVE  IO_THREAD;
Query OK, 0 rows affected (0.04 sec)
mysql&gt; START SLAVE  IO_THREAD;
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<p><strong>4.验证</strong><br>
<strong>主：</strong></p>

<pre><code>mysql&gt; show status like '%semi_sync%';
</code></pre>

<p><img src="http://geekwolf.github.io/images/mysql/replication/semi.png" alt="" /></p>

<pre><code>Rpl_semi_sync_master_clients: 值为2，表示有2个semi-sync的备库
Rpl_semi_sync_master_net_avg_wait_time: 表示事务提交后，等待备库响应的平均时间
Rpl_semi_sync_master_no_times: 表示有几次从半同步切换到异步复制
Rpl_semi_sync_master_status : 值为ON，表示半同步复制处于打开状态
Rpl_semi_sync_master_tx_avg_wait_time ：开启Semi-sync，事务返回需要等待的平均时间
Rpl_semi_sync_master_wait_sessions：当前有几个线程在等备库响应
Rpl_semi_sync_master_yes_tx : 值为1054，表示主库有1054个事务是通过半同步复制到从库
Rpl_semi_sync_master_no_tx  : 值为0，表示当前有0个事务不是通过半同步模式同步到从库的
</code></pre>

<p><strong>从：</strong></p>

<pre><code>检查半同步是否开启
show status like '%semi_sync%';
</code></pre>

<p><img src="http://geekwolf.github.io/images/mysql/replication/semion.png" alt="" /></p>

<pre><code>检查复制是否正常
show slave status \G;
</code></pre>

<p><strong><span id="r9">四、提升主从复制性能的方法</span></strong></p>

<p><strong>方案1：</strong>多级主从架构，将不同库分开复制到不同从上</p>

<p><img src="http://geekwolf.github.io/images/mysql/replication/fzjg.png" alt="" /></p>

<p><strong>注意事项：</strong><br>
&emsp;&emsp;M2上打开log-slave-updates配置，保证M1传送的binlog能够被记录在M2的RelayLog和Binlog；M2可以选择BLACKHOLE引擎降低M2的I/O；并且Binlog日志的过滤可以在M2去做<br>
&emsp;&emsp;BLACKHOLE引擎的使用测试参考:
&emsp;&emsp;<a href="http://jroller.com/dschneller/entry/mysql_replication_using_blackhole_engine">http://jroller.com/dschneller/entry/mysql_replication_using_blackhole_engine</a><br>
&emsp;&emsp;<a href="http://blog.csdn.net/kylinbl/article/details/8903336">http://blog.csdn.net/kylinbl/article/details/8903336</a></p>

<p><strong>方案2：多线程复制（MySQL5.6+）</strong><br>
&emsp;&emsp;多线程复制是基于库的，允许从库并行更新，若单库压力大，此处的多线程复制没有意义；从库设置slave_parallel_workers=4表示MySQL从库在复制时启动4个SQL线程<br>
 &emsp;&emsp;MySQL5.6一下版本可以尝试Transfer补丁<a href="http://dinglin.iteye.com/blog/1888640">http://dinglin.iteye.com/blog/1888640</a><br>
<strong><span id="r10">五、Mysql复制遇到的一些问题</span></strong><br>
<strong>1.指定特定的数据库或者表</strong></p>

<pre><code>replicate-do-db  告诉从服务器限制默认数据库(由USE所选择)为db_name的语句的复制，指定多个库时多次使用此参数，一次指定一个库，不能跨数据库更新；需要跨数据库进行更新，使用--replicate-wild-do-table=db_name.%
比如：
如果用--replicate-do-db=sales启动从服务器，并且在主服务器上执行下面的语句，UPDATE语句不会复制：
USE prices; UPDATE sales.january SET amount=amount+1000;

replicate-do-table  只复制某个表 ，支持跨库更新，指定多个表时多次使用此参数，一次指定一个表
replicate-ignore-db告诉从服务器不要复制默认数据库(由USE所选择)为db_name的语句。要想忽略多个数据库，应多次使用该选项，每个数据库使用一次。如果正进行跨数据库更新并且不想复制这些更新，不应使用该选项。应使用--replicate-wild-ignore-table=db_name.%
replicate-ignore-table 告诉从服务器线程不要复制更新指定表的任何语句(即使该语句可能更新其它的表)。要想忽略多个表，应多次使用该选项，每个表使用一次。同--replicate-ignore-db对比，该选项可以跨数据库进行更新

replicate-wild-do-table  告诉从服务器线程限制复制更新的表匹配指定的数据库和表名模式的语句。模式可以包含‘%’和‘_’通配符，与LIKE模式匹配操作符具有相同的含义。要指定多个表，应多次使用该选项，每个表使用一次。该选项可以跨数据库进行更新。请读取该选项后面的注意事项。
例如：--replicate-wild-do-table=foo%.bar%只复制数据库名以foo开始和表名以bar开始的表的更新。

replicate-wild-ignore-table告诉从服务器线程不要复制表匹配给出的通配符模式的语句 

从库增加(同步test库的bench1表，忽略同步mysql库所有表)：
replicate-wild-do-table=test.bench1
replicate-wild-ignore-table=mysql.%
</code></pre>

<p><strong>2.从库复制出错跳过</strong></p>

<pre><code>mysql&gt;SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
</code></pre>

<p><strong>3.log event entry exceeded max_allowed_packet的处理</strong></p>

<p>&emsp;&emsp;适当增加max_allowed_packet大小</p>

<p><strong>4.因主库大量滞后binlog，启动slave时，可能会跑满网卡带宽</strong></p>

<p>&emsp;&emsp;前段时间微博上@zolker遇到这类问题，网友也给了很多解决办法，趁此blog总结下<br>
&emsp;&emsp;A.级联备库方式，避免主MySQL网卡跑满影响<br>
&emsp;&emsp;B.脚本的方式每隔几秒(sleep)把io_thread停一会，进行缓解 （这种方法简单、粗暴、有效,但有抖动）<br>
&emsp;&emsp;C.使用facebook的patch <a href="https://github.com/facebook/mysql-5.6/commit/d3b0c7814090bded6563fee7d46d2ae41ed32a60">https://github.com/facebook/mysql-5.6/commit/d3b0c7814090bded6563fee7d46d2ae41ed32a60</a><br></p>

<p>&emsp;&emsp;以上是本人在学习过程中的笔记，一码一字敲出来的，有错误地方请留言，谢谢~转载请写明出处~</p>

<p><strong>参考文档：</strong></p>

<blockquote><p><a href="http://www.ovaistariq.net/528/statement-based-vs-row-based-replication/">http://www.ovaistariq.net/528/statement-based-vs-row-based-replication/</a><br>
<a href="http://www.orczhou.com/index.php/2011/06/mysql-5-5-semi-sync-replication-setup-config/">http://www.orczhou.com/index.php/2011/06/mysql-5-5-semi-sync-replication-setup-config/</a><br>
<a href="http://www.linuxde.net/2013/09/15194.html">http://www.linuxde.net/2013/09/15194.html</a><br>
<a href="http://dev.mysql.com/doc/refman/5.6/en/replication.html">http://dev.mysql.com/doc/refman/5.6/en/replication.html</a><br>
《深入浅出MySQL》</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MHA高可用部署及测试]]></title>
    <link href="http://geekwolf.github.io/blog/2014/05/17/mhagao-ke-yong-bu-shu-ji-ce-shi/"/>
    <updated>2014-05-17T10:41:14+08:00</updated>
    <id>http://geekwolf.github.io/blog/2014/05/17/mhagao-ke-yong-bu-shu-ji-ce-shi</id>
    <content type="html"><![CDATA[<p><a href="#t1">一、MHA特性</a><br>
<a href="#t2">二、MHA工作机制及failover过程解析</a><br>
<a href="#t3">三、MHA适用的主从架构</a><br>
<a href="#t4">四、MHA高可用环境的构建</a><br>
&emsp;&emsp;&emsp;&emsp;4.1 <a href="#t5">实验环境</a><br>
&emsp;&emsp;&emsp;&emsp;4.2 <a href="#t6">实验大概步骤</a><br>
&emsp;&emsp;&emsp;&emsp;4.3 <a href="#t7">相关脚本说明</a><br>
&emsp;&emsp;&emsp;&emsp;4.4 <a href="#t8">MHA部署过程</a><br>
&emsp;&emsp;&emsp;&emsp;4.5 <a href="#t9">配置VIP的方式</a><br>
<a href="#t10">五、MHA常用命令</a><br>
<a href="#t11">六、注意事项</a><br>
<a href="#t12">七、部署过程遇到的问题</a><br></p>

<h5><span id="t1">一.MHA特性</span></h5>

<p>1.主服务器的自动监控和故障转移 <br>
&emsp;&emsp;MHA监控复制架构的主服务器，一旦检测到主服务器故障，就会自动进行故障转移。即使有些从服务器没有收到最新的relay log，MHA自动从最新的从服务器上识别差异的relay log并把这些日志应用到其他从服务器上，因此所有的从服务器保持一致性了。MHA通常在几秒内完成故障转移，9-12秒可以检测出主服务器故障，7-10秒内关闭故障的主服务器以避免脑裂，几秒中内应用差异的relay log到新的主服务器上，整个过程可以在10-30s内完成。还可以设置优先级指定其中的一台slave作为master的候选人。由于MHA在slaves之间修复一致性，因此可以将任何slave变成新的master，而不会发生一致性的问题，从而导致复制失败。<br>
2.交互式主服务器故障转移 <br></p>

<!--more-->


<p>&emsp;&emsp;可以只使用MHA的故障转移，而不用于监控主服务器，当主服务器故障时，人工调用MHA来进行故障故障。<br>
3.非交互式的主故障转移 <br>
&emsp;&emsp;不监控主服务器，但自动实现故障转移。这种特征适用于已经使用其他软件来监控主服务器状态，比如heartbeat来检测主服务器故障和虚拟IP地址接管，可以使用MHA来实现故障转移和slave服务器晋级为master服务器。<br>
4.在线切换主服务器 <br>
&emsp;&emsp;在许多情况下，需要将现有的主服务器迁移到另外一台服务器上。比如主服务器硬件故障，RAID控制卡需要重建，将主服务器移到性能更好的服务器上等等。维护主服务器引起性能下降，导致停机时间至少无法写入数据。另外，阻塞或杀掉当前运行的会话会导致主主之间数据不一致的问题发生。MHA提供快速切换和优雅的阻塞写入，这个切换过程只需要0.5-2s的时间，这段时间内数据是无法写入的。在很多情况下，0.5-2s的阻塞写入是可以接受的。因此切换主服务器不需要计划分配维护时间窗口(呵呵，不需要你在夜黑风高时通宵达旦完成切换主服务器的任务)。<br></p>

<!--more-->


<h5><span id="t2">二.MHA工作机制</span></h5>

<p>MHA自动Failover过程解析<br>
<a href="http://www.mysqlsystems.com/2012/03/figure-out-process-of-autofailover-on-mha.html">http://www.mysqlsystems.com/2012/03/figure-out-process-of-autofailover-on-mha.html</a><br>
<a href="https://code.google.com/p/mysql-master-ha/wiki/Sequences_of_MHA">https://code.google.com/p/mysql-master-ha/wiki/Sequences_of_MHA</a></p>

<h5><span id="t3">三.MHA适用的主从架构</span> <br></h5>

<p><a href="https://code.google.com/p/mysql-master-ha/wiki/UseCases">https://code.google.com/p/mysql-master-ha/wiki/UseCases</a></p>

<h5><span id="t4">四.MHA高可用环境的构建</span><br></h5>

<h5><span id="t5">4.1 实验环境</span></h5>

<p><img src="http://geekwolf.github.io/images/mysql/ar.png" alt="" /></p>

<ul>
<li>Node1:192.168.10.216 (主)</li>
<li>Node2:192.168.10.217 (从,主故障切换的备主)</li>
<li>Node3:192.168.10.218 (从,兼MHA管理节点)</li>
<li>VIP : 192.168.10.219</li>
<li>Mysql:Percona-Server-5.6.16-rel64.2-569</li>
<li>以上节点系统均为CentOS6.5 x64</li>
</ul>


<h5><span id="t6">4.2 实验大概步骤</span></h5>

<ol type="a">
<li>三节点配置epel的yum源，安装相关依赖包<br></li>
<li>建立主从复制关系<br></li>
<li>ssh-keygen实现三台机器之间相互免密钥登录 <br></li>
<li>三节点安装mha4mysql-node-0.56,node3上安装mha4mysql-manager-0.56 <br></li>
<li>在node3上管理MHA配置文件<br></li>
<li>masterha_check_ssh验证ssh信任登录是否成功,masterha_check_repl验证mysql复制是否成功<br></li>
<li>启动MHA manager，并监控日志文件<br></li>
<li>测试master(Node1)的mysql宕掉后，是否会自动切换正常<br>
I . 配置VIP，切换后从自动接管主服务，并对客户端透明<br></li>
</ol>


<h5><span id="t7">4.3 脚本相关说明</span></h5>

<p>MHA node有三个脚本，依赖perl模块<br>
save_binary_logs：保存和拷贝宕掉的主服务器二进制日志 <br>
apply_diff_relay_logs:识别差异的relay log事件，并应用到所有从服务器节点 <br>purge_relay_logs:清除relay log日志文件<br></p>

<h5><span id="t8">4.4 MHA部署过程</span></h5>

<p><strong>A.</strong>三节点配置epel的yum源，安装相关依赖包</p>

<pre><code>rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
yum  -y install perl-DBD-MySQL  ncftp
</code></pre>

<p><strong>B.</strong> 建立主从复制关系</p>

<p>在node1上：</p>

<pre><code>mysql&gt;grant replication slave  on *.* to 'rep'@'192.168.10.%' identified by 'geekwolf';
mysql&gt;grant all on *.* to 'root'@'192.168.10.%' identified by 'geekwolf';
mysql&gt;show master status;
</code></pre>

<p>拷贝node1的data目录同步到node2，node3
在node2 node3上：</p>

<pre><code>mysql&gt;change master  to  master_host='192.168.10.216', master_user='rep', master_password='geekwolf',master_port=3306, master_log_file='mysql-in.000006',master_log_pos=120,master_connect_retry=1;
mysql&gt;start slave;
</code></pre>

<p>每个节点都做好mysql命令的软链</p>

<p><code>ln -s /usr/local/mysql/bin/* /usr/local/bin/</code></p>

<p><strong>C.</strong> ssh-keygen实现三台机器之间相互免密钥登录
在node1(在其他两个节点一同)执行</p>

<pre><code>ssh-keygen -t rsa 
ssh-copy-id -i /root/.ssh/id_rsa.pub root@node1 
ssh-copy-id -i /root/.ssh/id_rsa.pub root@node2 
ssh-copy-id -i /root/.ssh/id_rsa.pub root@node3
</code></pre>

<p><strong>D.</strong> 三节点安装mha4mysql-node-0.56,node3上安装mha4mysql-manager-0.56 <br>
在node1 node2 node3安装mha4mysql-node <br>
wget <a href="https://googledrive.com/host/0B1lu97m8-haWeHdGWXp0YVVUSlk/mha4mysql-node-0.56.tar.gz">https://googledrive.com/host/0B1lu97m8-haWeHdGWXp0YVVUSlk/mha4mysql-node-0.56.tar.gz</a><br>
tar xf mha4mysql-node-0.56.tar.gz <br>
cd mha4mysql-node <br>
perl Makefile.PL <br>
make &amp;&amp; make install<br></p>

<p>在node3上安装mha4mysql-manager<br>
wget <a href="https://googledrive.com/host/0B1lu97m8-haWeHdGWXp0YVVUSlk/mha4mysql-manager-0.56.tar.gz">https://googledrive.com/host/0B1lu97m8-haWeHdGWXp0YVVUSlk/mha4mysql-manager-0.56.tar.gz</a><br>
tar xf mha4mysql-manager-0.56.tar.gz <br>
cd mha4mysql-manager-0.56 <br>
yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Config-IniFiles perl-Time-HiRes</p>

<p><strong>E.</strong> 在node3上管理MHA配置文件 <br>
mkdir -p /etc/mha/{app1,scripts} <br>
cp mha4mysql-manager-0.56/samples/conf/<em> /etc/mha/ <br>
cp mha4mysql-manager-0.56/samples/scripts/</em> /etc/mha/scripts/ <br>
mv /etc/mha/app1.cnf /etc/mha/app1/ <br>
mv /etc/mha/masterha_default.cnf /etc/masterha_default.cnf<br></p>

<p>设置全局配置： <br>
vim /etc/mha/masterha_default.cnf</p>

<pre><code>[server default]
user=root
password=geekwolf
ssh_user=root
repl_user=rep
repl_password=geekwolf
ping_interval=1
#shutdown_script=""
secondary_check_script = masterha_secondary_check -s node1 -s node2 -s node3 --user=root --master_host=node1 --master_ip=192.168.10.216 --master_port=3306
#master_ip_failover_script="/etc/mha/scripts/master_ip_failover"
#master_ip_online_change_script="/etc/mha/scripts/master_ip_online_change"
# shutdown_script= /script/masterha/power_manager
#report_script=""
</code></pre>

<p>vim /etc/mha/app1/app1.cnf</p>

<pre><code>[server default] 
manager_workdir=/var/log/mha/app1
manager_log=/var/log/mha/app1/manager.log
[server1] 
hostname=node1
master_binlog_dir="/usr/local/mysql/logs"
candidate_master=1
[server2]
hostname=node2
master_binlog_dir="/usr/local/mysql/logs"
candidate_master=1
[server3]
hostname=node3
master_binlog_dir="/usr/local/mysql/logs"
no_master=1
</code></pre>

<p><strong>注释：</strong> <br>
&emsp;&emsp;candidate_master=1 表示该主机优先可被选为new master，当多个[serverX]等设置此参数时，优先级由[serverX]配置的顺序决定 <br>
&emsp;&emsp;secondary_check_script mha强烈建议有两个或多个网络线路检查MySQL主服务器的可用性。默认情况下,只有单一的路线 MHA Manager检查:从Manager to Master,但这是不可取的。MHA实际上可以有两个或两个以上的检查路线通过调用外部脚本定义二次检查脚本参数<br>
&emsp;&emsp;master_ip_failover_script 在MySQL从服务器提升为新的主服务器时，调用此脚本，因此可以将vip信息写到此配置文件 <br>
&emsp;&emsp;master_ip_online_change_script 使用masterha_master_switch命令手动切换MySQL主服务器时后会调用此脚本，参数和master_ip_failover_script 类似，脚本可以互用
&emsp;&emsp;shutdown_script 此脚本(默认samples内的脚本)利用服务器的远程控制IDRAC等，使用ipmitool强制去关机，以避免fence设备重启主服务器，造成脑列现象 <br>
&emsp;&emsp;report_script 当新主服务器切换完成以后通过此脚本发送邮件报告，可参考使用 <a href="http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz">http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz</a><br>
&emsp;&emsp;以上涉及到的脚本可以从mha4mysql-manager-0.56/samples/scripts/*拷贝进行修改使用 <br>
&emsp;&emsp;其他manager详细配置参数<a href="https://code.google.com/p/mysql-master-ha/wiki/Parameters">https://code.google.com/p/mysql-master-ha/wiki/Parameters</a><br></p>

<p><strong>F.</strong> masterha_check_ssh验证ssh信任登录是否成功,masterha_check_repl验证mysql复制是否成功 <br>
验证ssh信任：masterha_check_ssh &mdash;conf=/etc/mha/app1/app1.cnf</p>

<pre><code>[root@localhost ~]# masterha_check_ssh --conf=/etc/mha/app1/app1.cnf
Tue May 13 07:53:15 2014 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Tue May 13 07:53:15 2014 - [info] Reading application default configuration from /etc/mha/app1/app1.cnf..
Tue May 13 07:53:15 2014 - [info] Reading server configuration from /etc/mha/app1/app1.cnf..
Tue May 13 07:53:15 2014 - [info] Starting SSH connection tests..
Tue May 13 07:53:16 2014 - [debug]
Tue May 13 07:53:15 2014 - [debug] Connecting via SSH from root@node1(192.168.10.216:22) to root@node2(192.168.10.217:22)..
Tue May 13 07:53:15 2014 - [debug] ok.
Tue May 13 07:53:15 2014 - [debug] Connecting via SSH from root@node1(192.168.10.216:22) to root@node3(192.168.10.218:22)..
Tue May 13 07:53:16 2014 - [debug] ok.
Tue May 13 07:53:16 2014 - [debug]
Tue May 13 07:53:16 2014 - [debug] Connecting via SSH from root@node2(192.168.10.217:22) to root@node1(192.168.10.216:22)..
Tue May 13 07:53:16 2014 - [debug] ok.
Tue May 13 07:53:16 2014 - [debug] Connecting via SSH from root@node2(192.168.10.217:22) to root@node3(192.168.10.218:22)..
Tue May 13 07:53:16 2014 - [debug] ok.
Tue May 13 07:53:17 2014 - [debug]
Tue May 13 07:53:16 2014 - [debug] Connecting via SSH from root@node3(192.168.10.218:22) to root@node1(192.168.10.216:22)..
Tue May 13 07:53:16 2014 - [debug] ok.
Tue May 13 07:53:16 2014 - [debug] Connecting via SSH from root@node3(192.168.10.218:22) to root@node2(192.168.10.217:22)..
Tue May 13 07:53:17 2014 - [debug] ok.
Tue May 13 07:53:17 2014 - [info] All SSH connection tests passed successfully.
</code></pre>

<p>验证主从复制：masterha_check_repl &mdash;conf=/etc/mha/app1/app1.cnf</p>

<pre><code>[root@localhost mha]# masterha_check_repl --conf=/etc/mha/app1/app1.cnf
Tue May 13 08:10:54 2014 - [info] Reading default configuration from /etc/masterha_default.cnf..
Tue May 13 08:10:54 2014 - [info] Reading application default configuration from /etc/mha/app1/app1.cnf..
Tue May 13 08:10:54 2014 - [info] Reading server configuration from /etc/mha/app1/app1.cnf..
Tue May 13 08:10:54 2014 - [info] MHA::MasterMonitor version 0.56.
Tue May 13 08:10:54 2014 - [info] GTID failover mode = 0
Tue May 13 08:10:54 2014 - [info] Dead Servers:
Tue May 13 08:10:54 2014 - [info] Alive Servers:
Tue May 13 08:10:54 2014 - [info] node1(192.168.10.216:3306)
Tue May 13 08:10:54 2014 - [info] node2(192.168.10.217:3306)
Tue May 13 08:10:54 2014 - [info] node3(192.168.10.218:3306)
Tue May 13 08:10:54 2014 - [info] Alive Slaves:
Tue May 13 08:10:54 2014 - [info] node2(192.168.10.217:3306) Version=5.6.16-64.2-rel64.2-log (oldest major version between slaves) log-bin:enabled
Tue May 13 08:10:54 2014 - [info] Replicating from 192.168.10.216(192.168.10.216:3306)
Tue May 13 08:10:54 2014 - [info] Primary candidate for the new Master (candidate_master is set)
Tue May 13 08:10:54 2014 - [info] node3(192.168.10.218:3306) Version=5.6.16-64.2-rel64.2-log (oldest major version between slaves) log-bin:enabled
Tue May 13 08:10:54 2014 - [info] Replicating from 192.168.10.216(192.168.10.216:3306)
Tue May 13 08:10:54 2014 - [info] Not candidate for the new Master (no_master is set)
Tue May 13 08:10:54 2014 - [info] Current Alive Master: node1(192.168.10.216:3306)
Tue May 13 08:10:54 2014 - [info] Checking slave configurations..
Tue May 13 08:10:54 2014 - [info] read_only=1 is not set on slave node2(192.168.10.217:3306).
Tue May 13 08:10:54 2014 - [warning] relay_log_purge=0 is not set on slave node2(192.168.10.217:3306).
Tue May 13 08:10:54 2014 - [info] read_only=1 is not set on slave node3(192.168.10.218:3306).
Tue May 13 08:10:54 2014 - [warning] relay_log_purge=0 is not set on slave node3(192.168.10.218:3306).
Tue May 13 08:10:54 2014 - [info] Checking replication filtering settings..
Tue May 13 08:10:54 2014 - [info] binlog_do_db= , binlog_ignore_db=
Tue May 13 08:10:54 2014 - [info] Replication filtering check ok.
Tue May 13 08:10:54 2014 - [info] GTID (with auto-pos) is not supported
Tue May 13 08:10:54 2014 - [info] Starting SSH connection tests..
Tue May 13 08:10:55 2014 - [info] All SSH connection tests passed successfully.
Tue May 13 08:10:55 2014 - [info] Checking MHA Node version..
Tue May 13 08:10:55 2014 - [info] Version check ok.
Tue May 13 08:10:55 2014 - [info] Checking SSH publickey authentication settings on the current master..
Tue May 13 08:10:56 2014 - [info] HealthCheck: SSH to node1 is reachable.
Tue May 13 08:10:56 2014 - [info] Master MHA Node version is 0.56.
Tue May 13 08:10:56 2014 - [info] Checking recovery script configurations on node1(192.168.10.216:3306)..
Tue May 13 08:10:56 2014 - [info] Executing command: save_binary_logs --command=test --start_pos=4 --binlog_dir=/usr/local/mysql/logs --output_file=/var/tmp/save_binary_logs_test --manager_version=0.56 --start_file=mysql-bin.000009
Tue May 13 08:10:56 2014 - [info] Connecting to root@192.168.10.216(node1:22)..
  Creating /var/tmp if not exists.. ok.
  Checking output directory is accessible or not..
   ok.
  Binlog found at /usr/local/mysql/logs, up to mysql-bin.000009
Tue May 13 08:10:56 2014 - [info] Binlog setting check done.
Tue May 13 08:10:56 2014 - [info] Checking SSH publickey authentication and checking recovery script configurations on all alive slave servers..
Tue May 13 08:10:56 2014 - [info] Executing command : apply_diff_relay_logs --command=test --slave_user='root' --slave_host=node2 --slave_ip=192.168.10.217 --slave_port=3306 --workdir=/var/tmp --target_version=5.6.16-64.2-rel64.2-log --manager_version=0.56 --relay_log_info=/usr/local/mysql/data/relay-log.info --relay_dir=/usr/local/mysql/data/ --slave_pass=xxx
Tue May 13 08:10:56 2014 - [info] Connecting to root@192.168.10.217(node2:22)..
  Checking slave recovery environment settings..
    Opening /usr/local/mysql/data/relay-log.info ... ok.
    Relay log found at /usr/local/mysql/logs, up to relay-bin.000006
    Temporary relay log file is /usr/local/mysql/logs/relay-bin.000006
    Testing mysql connection and privileges..Warning: Using a password on the command line interface can be insecure.
 done.
    Testing mysqlbinlog output.. done.
    Cleaning up test file(s).. done.
Tue May 13 08:10:57 2014 - [info] Executing command : apply_diff_relay_logs --command=test --slave_user='root' --slave_host=node3 --slave_ip=192.168.10.218 --slave_port=3306 --workdir=/var/tmp --target_version=5.6.16-64.2-rel64.2-log --manager_version=0.56 --relay_log_info=/usr/local/mysql/data/relay-log.info --relay_dir=/usr/local/mysql/data/ --slave_pass=xxx
Tue May 13 08:10:57 2014 - [info] Connecting to root@192.168.10.218(node3:22)..
  Checking slave recovery environment settings..
    Opening /usr/local/mysql/data/relay-log.info ... ok.
    Relay log found at /usr/local/mysql/logs, up to relay-bin.000006
    Temporary relay log file is /usr/local/mysql/logs/relay-bin.000006
    Testing mysql connection and privileges..Warning: Using a password on the command line interface can be insecure.
 done.
    Testing mysqlbinlog output.. done.
    Cleaning up test file(s).. done.
Tue May 13 08:10:57 2014 - [info] Slaves settings check done.
Tue May 13 08:10:57 2014 - [info]
node1(192.168.10.216:3306) (current master)
 +--node2(192.168.10.217:3306)
 +--node3(192.168.10.218:3306)
Tue May 13 08:10:57 2014 - [info] Checking replication health on node2..
Tue May 13 08:10:57 2014 - [info] ok.
Tue May 13 08:10:57 2014 - [info] Checking replication health on node3..
Tue May 13 08:10:57 2014 - [info] ok.
Tue May 13 08:10:57 2014 - [warning] master_ip_failover_script is not defined.
Tue May 13 08:10:57 2014 - [warning] shutdown_script is not defined.
Tue May 13 08:10:57 2014 - [info] Got exit code 0 (Not master dead).
MySQL Replication Health is OK.
</code></pre>

<p><strong>G.</strong> 启动MHA manager，并监控日志文件<br>
在node1上killall mysqld的同时在node3上启动manager服务</p>

<pre><code>[root@localhost mha]# masterha_manager --conf=/etc/mha/app1/app1.cnf
Tue May 13 08:19:01 2014 - [info] Reading default configuration from /etc/masterha_default.cnf..
Tue May 13 08:19:01 2014 - [info] Reading application default configuration from /etc/mha/app1/app1.cnf..
Tue May 13 08:19:01 2014 - [info] Reading server configuration from /etc/mha/app1/app1.cnf..
  Creating /var/tmp if not exists.. ok.
  Checking output directory is accessible or not..
   ok.
  Binlog found at /usr/local/mysql/logs, up to mysql-bin.000009
Tue May 13 08:19:18 2014 - [info] Reading default configuration from /etc/masterha_default.cnf..
Tue May 13 08:19:18 2014 - [info] Reading application default configuration from /etc/mha/app1/app1.cnf..
Tue May 13 08:19:18 2014 - [info] Reading server configuration from /etc/mha/app1/app1.cnf..
</code></pre>

<p>&emsp;&emsp;之后观察node3上/var/log/mha/app1/manager.log日志会发现node1 dead状态，主自动切换到node2上，而node3上的主从配置指向了node2，并且发生一次切换后会生成/var/log/mha/app1/app1.failover.complete文件；<br>
<strong>手动恢复node1操作：</strong> <br>
&emsp;&emsp;rm -rf /var/log/mha/app1/app1.failover.complete<br>
&emsp;&emsp;启动node1上的mysql，重新配置node2 node3 主从指向node1（change master to）<br>
<strong>MHA Manager后台执行：</strong> <br>
nohup masterha_manager &mdash;conf=/etc/mha/app1/app1.cnf &lt; /dev/null > /var/log/mha/app1/app1.log 2>&amp;1 &amp; <br>
守护进程方式参考：
<a href="https://code.google.com/p/mysql-master-ha/wiki/Runnning_Background">https://code.google.com/p/mysql-master-ha/wiki/Runnning_Background</a><br>
<a href="ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/weberho:/qmailtoaster/openSUSE_Tumbleweed/x86_64/daemontools-0.76-5.3.x86_64.rpm">ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/weberho:/qmailtoaster/openSUSE_Tumbleweed/x86_64/daemontools-0.76-5.3.x86_64.rpm</a></p>

<h5><span id="t9">4.5 配置VIP的方式</span></h5>

<p><strong>A.</strong>通过全局配置文件实现 <br>
vim /etc/mha/masterha_default.cnf</p>

<pre><code>[server default]
  user=root
  password=geekwolf
  ssh_user=root
  repl_user=rep
  repl_password=geekwolf
  ping_interval=1
  secondary_check_script = masterha_secondary_check -s node1 -s node2 -s node3 --user=root --master_host=node1 --master_ip=192.168.10.216 --master_port=3306
  master_ip_failover_script="/etc/mha/scripts/master_ip_failover"
  master_ip_online_change_script="/etc/mha/scripts/master_ip_online_change"
  #shutdown_script= /script/masterha/power_manager
  #report_script=""
</code></pre>

<p>修改后的master_ip_failover、master_ip_online_change脚本</p>

<pre><code>#!/usr/bin/env perl
use strict;
use warnings FATAL =&gt; 'all';
use Getopt::Long;
my (
    $command, $ssh_user, $orig_master_host, $orig_master_ip,
    $orig_master_port, $new_master_host, $new_master_ip, $new_master_port
);
my $vip = '192.168.10.218'; # Virtual IP
my $gateway = '192.168.10.1';#Gateway IP
my $interface = 'eth0'
my $key = "1";
my $ssh_start_vip = "/sbin/ifconfig $interface:$key $vip;/sbin/arping -I $interface -c 3 -s $vip $gateway &gt;/dev/null 2&gt;&amp;1";
my $ssh_stop_vip = "/sbin/ifconfig $interface:$key down";
GetOptions(
    'command=s' =&gt; \$command,
    'ssh_user=s' =&gt; \$ssh_user,
    'orig_master_host=s' =&gt; \$orig_master_host,
    'orig_master_ip=s' =&gt; \$orig_master_ip,
    'orig_master_port=i' =&gt; \$orig_master_port,
    'new_master_host=s' =&gt; \$new_master_host,
    'new_master_ip=s' =&gt; \$new_master_ip,
    'new_master_port=i' =&gt; \$new_master_port,
);
exit &amp;main();
sub main {
    print "\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n";
    if ( $command eq "stop" || $command eq "stopssh" ) {
        # $orig_master_host, $orig_master_ip, $orig_master_port are passed.
        # If you manage master ip address at global catalog database,
        # invalidate orig_master_ip here.
        my $exit_code = 1;
        eval {
            print "Disabling the VIP on old master: $orig_master_host \n";
            &amp;stop_vip();
            $exit_code = 0;
        };
        if ($@) {
            warn "Got Error: $@\n";
            exit $exit_code;
        }
        exit $exit_code;
    }
    elsif ( $command eq "start" ) {
        # all arguments are passed.
        # If you manage master ip address at global catalog database,
        # activate new_master_ip here.
        # You can also grant write access (create user, set read_only=0, etc) here.
        my $exit_code = 10;
        eval {
            print "Enabling the VIP - $vip on the new master - $new_master_host \n";
            &amp;start_vip();
            $exit_code = 0;
        };
        if ($@) {
            warn $@;
            exit $exit_code;
        }
        exit $exit_code;
    }
    elsif ( $command eq "status" ) {
        print "Checking the Status of the script.. OK \n";
        `ssh $ssh_user\@cluster1 \" $ssh_start_vip \"`;
        exit 0;
    }
    else {
        &amp;usage();
        exit 1;
    }
}
# A simple system call that enable the VIP on the new master
sub start_vip() {
    `ssh $ssh_user\@$new_master_host \" $ssh_start_vip \"`;
}
# A simple system call that disable the VIP on the old_master
sub stop_vip() {
    `ssh $ssh_user\@$orig_master_host \" $ssh_stop_vip \"`;
}
sub usage {
    print
    "Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n";
}
</code></pre>

<p><strong>B.</strong>通过第三方HA（keepalived、heartbeat）实现VIP，以keepalived为例 <br>
以node1 node2互为主备进行配置keepalived <br>
在node1 node2上分别下载安装keepalived <br>
wget <a href="http://www.keepalived.org/software/keepalived-1.2.13.tar.gz">http://www.keepalived.org/software/keepalived-1.2.13.tar.gz</a> <br>
yum -y install popt-* <br>
./configure &mdash;prefix=/usr/local/keepalived &mdash;enable-snmp <br>
make &amp;&amp; make install <br>
cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/ <br>
cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/<br>
chmod +x /etc/rc.d/init.d/keepalived <br>
chkconfig keepalived on <br>
mkdir /etc/keepalived <br>
ln -s /usr/local/keepalived/sbin/keepalived /usr/sbin<br></p>

<p>修改node1(192.168.10.216)配置文件 <br>
vim /etc/keepalived/keepalived.conf</p>

<pre><code>! Configuration File for keepalived
global_defs {
 router_id MHA 
 notification_email {
 root@localhost   #接收邮件，可以有多个，一行一个
}
 #当主、备份设备发生改变时，通过邮件通知
 notification_email_from  m@localhost
 #发送邮箱服务器
 smtp_server 127.0.0.1
 #发送邮箱超时时间
 smtp_connect_timeout 30
 }

varrp_script check_mysql {
     script "/etc/keepalived/check_mysql.sh"
}
vrrp_sync_group VG1 {
    group {
          VI_1
    }
notify_master "/etc/keepalived/master.sh"
}

vrrp_instance VI_1 {
     state master     
     interface eth0   
     virtual_router_id 110
     priority 100            
     advert_int 1
     nopreempt #不抢占资源，意思就是它活了之后也不会再把主抢回来

     authentication {
     # 认证方式，可以是PASS或AH两种认证方式
     auth_type PASS
     # 认证密码
     auth_pass geekwolf
     }
track_script {
     check_mysql
}
virtual_ipaddress {
     192.168.10.219
     }

}
</code></pre>

<p>修改node2(192.168.10.217)配置文件 <br>
vim /etc/keepalived/keepalived.conf</p>

<pre><code>! Configuration File for keepalived
global_defs {
 router_id MHA 
 notification_email {
 root@localhost   #接收邮件，可以有多个，一行一个
}
 #当主、备份设备发生改变时，通过邮件通知
 notification_email_from  m@localhost
 #发送邮箱服务器
 smtp_server 127.0.0.1
 #发送邮箱超时时间
 smtp_connect_timeout 30
 }

varrp_script check_mysql {
     script "/etc/keepalived/check_mysql.sh"
}
vrrp_sync_group VG1 {
    group {
          VI_1
    }
notify_master "/etc/keepalived/master.sh"
}
vrrp_instance VI_1 {
     state backup    
     interface eth0    
     virtual_router_id 110
     priority 99            
     advert_int 1

     authentication {
     # 认证方式，可以是PASS或AH两种认证方式
     auth_type PASS
     # 认证密码
     auth_pass geekwolf
     }
track_script {
     check_mysql
}
virtual_ipaddress {
     192.168.10.219
     }

}
</code></pre>

<p>check_mysql.sh</p>

<pre><code>#!/bin/bash
MYSQL=/usr/local/mysql/bin/mysql
MYSQL_HOST=127.0.0.1
MYSQL_USER=root
MYSQL_PASSWORD=geekwolf
CHECK_TIME=3
#mysql  is working MYSQL_OK is 1 , mysql down MYSQL_OK is 0
MYSQL_OK=1
function check_mysql_helth (){
$MYSQL -h $MYSQL_HOST -u $MYSQL_USER -e "show status;" &gt;/dev/null 2&gt;&amp;1
if [ $? = 0 ] ;then
     MYSQL_OK=1
else
     MYSQL_OK=0
fi
     return $MYSQL_OK
}
while [ $CHECK_TIME -ne 0 ]
do
     let "CHECK_TIME -= 1"
     check_mysql_helth
if [ $MYSQL_OK = 1 ] ; then
     CHECK_TIME=0
     exit 0
fi
if [ $MYSQL_OK -eq 0 ] &amp;&amp;  [ $CHECK_TIME -eq 0 ]
then
     pkill keepalived
exit 1
fi
sleep 1
done
</code></pre>

<p>master.sh</p>

<pre><code>#!/bin/bash
VIP=192.168.10.219
GATEWAY=1.1
/sbin/arping -I eth0 -c 5 -s $VIP $GATEWAY &amp;&gt;/dev/null
</code></pre>

<p>chmod +x /etc/keepalived/check_mysql.sh <br>
chmod +x /etc/keepalived/master.sh</p>

<h5><span id="t10">五.MHA常用命令</span></h5>

<p>查看manager状态 <br>
masterha_check_status &mdash;conf=/etc/mha/app1/app1.cnf</p>

<p>查看免密钥是否正常 <br>
masterha_check_ssh &mdash;conf=/etc/mha/app1/app1.cnf</p>

<p>查看主从复制是否正常 <br>
masterha_check_repl &mdash;conf=/etc/mha/app1/app1.cnf</p>

<p>添加新节点server4到配置文件 <br>
masterha_conf_host &mdash;command=add &mdash;conf=/etc/mha/app1/app1.cnf &mdash;hostname=geekwolf &mdash;block=server4 &mdash;params=&ldquo;no_master=1;ignore_fail=1&rdquo;
删除server4节点 <br>
masterha_conf_host &mdash;command=delete &mdash;conf=/etc/mha/app1/app1.cnf &mdash;block=server4</p>

<p><strong>注：</strong> <br>
block:为节点区名，默认值 为[server_$hostname],如果设置成block=100，则为[server100]
params:参数，分号隔开(参考<a href="https://code.google.com/p/mysql-master-ha/wiki/Parameters">https://code.google.com/p/mysql-master-ha/wiki/Parameters</a>)</p>

<p>关闭manager服务 <br>
masterha_stop &mdash;conf=/etc/mha/app1/app1.cnf</p>

<p>主手动切换(前提不要启动masterha_manager服务) <br>
在主node1存活情况下进行切换 <br>
交互模式： <br>
masterha_master_switch &mdash;master_state=alive &mdash;conf=/etc/mha/app1/app1.cnf &mdash;new_master_host=node2 <br>
非交互模式： <br>
masterha_master_switch &mdash;master_state=alive &mdash;conf=/etc/mha/app1/app1.cnf &mdash;new_master_host=node2 &mdash;interactive=0 <br>
在主node1宕掉情况下进行切换 <br>
masterha_master_switch &mdash;master_state=dead &mdash;conf=/etc/mha/app1/app1.cnf &mdash;dead_master_host=node1 &mdash;dead_master_ip=192.168.10.216 &mdash;dead_master_port=3306 &mdash;new_master_host=192.168.10.217
详细请参考:<a href="https://code.google.com/p/mysql-master-ha/wiki/TableOfContents?tm=6">https://code.google.com/p/mysql-master-ha/wiki/TableOfContents?tm=6</a>
*</p>

<h5><span id="t11">六.注意事项</span> <br></h5>

<p><strong>A.</strong> 以上两种vip切换方式，建议采用第一种方法 <br>
<strong>B.</strong> 发生主备切换后，manager服务会自动停掉，且在/var/log/mha/app1下面生成<br>app1.failover.complete，若再次发生切换需要删除app1.failover.complete文件<br>
<strong>C.</strong> 测试过程发现一主两从的架构(两从都设置可以担任主角色candidate_master=1)，当旧主故障迁移到备主后，删除app1.failover.complete，再次启动manager，停掉新主后，发现无法正常切换(解决方式：删除/etc/mha/app1/app1.cnf里面的旧主node1的信息后，重新切换正常) <br>
<strong>D.</strong> arp缓存导致切换VIP后，无法使用问题 <br>
<strong>E.</strong> 使用Semi-Sync能够最大程度保证数据安全<br>
<strong>F.</strong> Purge_relay_logs脚本删除中继日志不会阻塞SQL线程，在每台从节点上设置计划任务定期清除中继日志<br>
&emsp;&emsp;0 5 * * * root /usr/bin/purge_relay_logs &mdash;user=root &mdash;password=geekwolf &mdash;disable_relay_log_purge >> /var/log/mha/purge_relay_logs.log 2>&amp;1</p>

<h5><span id="t12">七.部署过程遇到的问题</span></h5>

<p><strong>问题1：</strong>
[root@node1 mha4mysql-node-0.56]# perl Makefile.PL <br>
Can&rsquo;t locate ExtUtils/MakeMaker.pm in @INC (@INC contains: inc /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at inc/Module/Install/Makefile.pm line 4.  <br>
BEGIN failed&mdash;compilation aborted at inc/Module/Install/Makefile.pm line 4.
Compilation failed in require at inc/Module/Install.pm line 283.  <br>
Can&rsquo;t locate ExtUtils/MakeMaker.pm in @INC (@INC contains: inc /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/ <br>vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at inc/Module/Install/Can.pm line 6.  <br>
BEGIN failed&mdash;compilation aborted at inc/Module/Install/Can.pm line 6.  <br>
Compilation failed in require at inc/Module/Install.pm line 283.  <br>
Can&rsquo;t locate ExtUtils/MM_Unix.pm in @INC (@INC contains: inc /usr/local/lib64/ <br>perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at inc/Module/Install/ <br>Metadata.pm line 349.  <br>
<strong>解决办法：</strong>  <br>
yum -y install perl-CPAN perl-devel perl-DBD-MySQL</p>

<p><strong>问题2：</strong>  <br>
Can&rsquo;t locate Time/HiRes.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /usr/local/share/perl5/MHA/SSHCheck.pm line 28.  <br>
BEGIN failed&mdash;compilation aborted at /usr/local/share/perl5/MHA/SSHCheck.pm line 28.  <br>
Compilation failed in require at /usr/local/bin/masterha_check_ssh line 25.
BEGIN failed&mdash;compilation aborted at /usr/local/bin/masterha_check_ssh line 25. <br>
<strong>解决办法</strong>：  <br>
yum -y install perl-Time-HiRes</p>

<p><strong>问题3：</strong>
<img src="http://geekwolf.github.io/images/mysql/mhaq.jpg" alt="" />
<strong>解决办法:</strong> <br>
每个节点都做好mysql命令的软链 <br>
ln -s /usr/local/mysql/bin/* /usr/local/bin/<br></p>

<p><strong>问题4：</strong>
![<a href="http://geekwolf.github.io/images/mysql/mhareadonly.png">http://geekwolf.github.io/images/mysql/mhareadonly.png</a>]</p>

<p><strong>参考文档：</strong></p>

<blockquote><p><a href="https://code.google.com/p/mysql-master-ha">https://code.google.com/p/mysql-master-ha</a> <br>
<a href="http://blog.chinaunix.net/uid-28437434-id-3476641.html">http://blog.chinaunix.net/uid-28437434-id-3476641.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[存储引擎介绍及适用场景]]></title>
    <link href="http://geekwolf.github.io/blog/2014/04/23/cun-chu-yin-qing-jie-shao-ji-gua-yong-chang-jing/"/>
    <updated>2014-04-23T14:05:56+08:00</updated>
    <id>http://geekwolf.github.io/blog/2014/04/23/cun-chu-yin-qing-jie-shao-ji-gua-yong-chang-jing</id>
    <content type="html"><![CDATA[<p>查看当前的默认存储引擎<br>
<code>  show variables  like 'table_type';</code></p>

<p>查看当前数据库支持的引擎<br>
<code>   show engines \G;</code><br>
<code>   show variables like 'have%';</code></p>

<!--more-->


<p>创建表时指定存储引擎<br>
<code>   create table ai (i bigint(20) not null auto_increment,primary key(i));</code><br></p>

<p>修改表引擎<br>
<code>  alter table ai engine=innodb;</code></p>

<p><strong>常见Mysql数据库引擎对比：</strong></p>

<p><img src="/images/mysql/engines.png" alt="" /></p>

<h5>一、MyISAM引擎特点：<br></h5>

<p>在磁盘存储成3个文件，文件名和表名一样，但扩展名分别为：<br>
.frm        (存储表定义)<br>
.MYD     （MYData，存储数据）<br>
.MYI       （MYIndex，存储索引）<br>
其中数据文件和索引文件可以分开在不同目录，平均分布IO</p>

<p>创建表时指定数据和索引路径：<br></p>

<p><code>create table geekwolf (id int,c varchar(10)) data directory='/data/data/' index directory='/data/index' engine='MyISAM';</code></p>

<p>MyISAM的表可能出现损坏的解决办法：<br>
check table geekwolf；检查表的健康情况<br>
repair table geekwolf；修改表<br></p>

<p>MyISAM的表引擎支持3种不同的存储格式：<br>
<strong>静态表</strong>（默认格式，固定长度，存储时按照列宽度定义补足空格；在查询时会丢失尾部的空格）<br>
<strong>动态表</strong>（频繁更新删除记录会产生碎片，占用空间相对较少，需要定期执行optimize table 或myisamchk -r来改善性能）<br>
<strong>压缩表</strong> （由myisampack工具创建）<br></p>

<p><strong>适用场景：</strong><br>
以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性，并发性要求不是很高的场景</p>

<h5>二、INNODB引擎特点：<br></h5>

<p><strong>1.自动增长列：</strong><br></p>

<pre><code>InnoDB表，自动增长列必须是索引，如果是组合索引，必须是组合索引的第一列；&lt;br&gt;
对于MyISAM引擎表，自动增长列可以是组合索引的其他列，这样插入记录后，自动增长列是按照组合索引的前面激烈进行排序后递增的&lt;br&gt;
创建MyISAM表autoincre_demo&lt;br&gt;
</code></pre>

<p><code>    create table autoincre_demo (d1 smallint not null auto_increment,d2 smallint not null,name varchar(10),index(d2.d1)) engine=myisam;</code></p>

<p>如图所示：自动增长列是d1作为组合索引的第二列,插入记录后，发现增长列是按照组合索引的第一列d2进行排序后递增的</p>

<p><img src="/images/mysql/autoincre.png" alt="" /><br></p>

<p><strong>2.外键约束：</strong>
  Innodb引擎支持外键，在创建外键时，要求父表必须有对应的索引，子表在创建外键的时候也会自动创建对应的索引<br>
  外键信息可以通过show table status like &lsquo;test&rsquo; \G;  show create table &lsquo;test&rsquo;;<br></p>

<p><strong>3.存储方式：</strong><br>
<strong>A.</strong> 使用共享表空间，这种方式创建的表结果保存在.frm文件，数据和索引保存在innodb_data_home_dir innodb_data_file_path定义的表空间中<br>
<strong>B.</strong>多表空间存储，表结构保存在.frm文件中，但是每个表的数据和索引单独存放在.ibd中；每个分区对于单独的.ibd<br>
   （需要开启innodb_file_per_table=1）<br>
 对于使用多表空间的表可以方便进行单表备份恢复，简单复制ibd和frm文件的方法因没有共享表空间的字典信息，而无法使用；多表空间情况，因为Innodb把内部的数据字典和在线重做日志存放在共享表空间里面</p>

<p><strong>使用此语句删除.ibd文件：</strong><br>
<code>ALTER TABLE tbl_name DISCARD TABLESPACE;</code><br>
要把备份的.ibd文件还原到表中，需把此文件复制到数据库目录中，然后书写此语句：<br>
<code>ALTER TABLE tbl_name IMPORT TABLESPACE;</code></p>

<p><strong>适用场景：</strong><br>
需要事务处理，对事务的完整性要求高，并发条件下要求数据一致性的计费系统或者财务系统等对数据准心要求比较搞的系统（5.5+默认引擎）</p>

<h5>三、MEMORY引擎：</h5>

<p> <strong>A.</strong>每个MEMORY表实际对应一个磁盘文件.frm，数据存放在内存，默认采用HASH索引（也可以设置撑Btree索引），服务关闭数据会丢失<br>
 <strong>B.</strong>是否memory表中的内存可以通过delete from 或者truncate 或者drop table<br>
<strong>C.</strong>memory表可以放置数据量的大小受到max_heap_table_size变量约束，默认16M，在定义表时可以用MAX_ROWS指定表的最大行数<br>
<strong>D.</strong>使用环境：用于内容变化不频繁或者作为统计操作的中间结果表</p>

<p><strong>适用场景：</strong><br>
一般用于更新不太频繁的小表，用以快速得到访问结果的环境，但对表大小有限制</p>

<h5>四、TOKUDB引擎：<br></h5>

<p>   具有高压缩率高效的插入性能，支持大多数在线DDL<br>
   与InnoDB引擎对比测试：<a href="http://www.tokutek.com/resources/tokudb-vs-innodb/">http://www.tokutek.com/resources/tokudb-vs-innodb/</a><br>
   <strong>特性：</strong><br></p>

<pre><code>使用Fractal树索引保证了高效的插入性能
优秀的压缩特性，比InnoDB高近10倍
Hot Schema Changes特性支持在线创建索引和添加/删除属性列等DDL操作
使用Bulk Loader达到快速加载大数据量
提供主从延迟消除技术
支持ACID和MVCC
</code></pre>

<p><strong>适用场景：</strong><br>
日志数据，日志通常插入频繁切存储量大；<br>
历史数据，通常不会再有写操作，可以利用TokuDB的高压缩特性存储；<br>
在线DDL较频繁的场景，使用TokuDB可以大大增加系统可用性；</p>

<p><strong>注：</strong>
具体使用哪种引擎要根据自己的业务的特点去决定</p>
]]></content>
  </entry>
  
</feed>
